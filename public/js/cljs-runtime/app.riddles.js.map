{"version":3,"sources":["app/riddles.cljs"],"mappings":"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","names":["app.riddles/api-call","joke-map","cljs.core/reset!","x","c__25962__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25963__auto__","switch__25917__auto__","state_26277","state_val_26278","inst_26249","inst_26250","inst_26251","cljs.core/PersistentHashMap","inst_26252","cljs.core.async.impl.ioc-helpers/take!","inst_26254","inst_26255","cljs.core/PersistentVector","inst_26256","inst_26257","inst_26258","inst_26259","inst_26260","inst_26261","inst_26262","inst_26263","inst_26264","inst_26265","inst_26266","inst_26267","cljs.core/deref","inst_26268","inst_26269","inst_26270","inst_26271","inst_26272","inst_26273","inst_26274","inst_26275","statearr-26279","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26280","state-machine__25918__auto__","ret-value__25919__auto__","result__25920__auto__","cljs.core/keyword-identical?","ex__25921__auto__","e26281","statearr-26282","cljs.core/seq","statearr-26283","cljs.core/first","state__25964__auto__","statearr-26284","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.get_in","cljs.core/assoc","cljs.core.map","cljs.core/val","cljs.core/shuffle","app.riddles/lister","items","letters","cljs.core/count","iter__4529__auto__","s__26286","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__26288","cljs.core/chunk-buffer","i__26287","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26285","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","item","cljs.core.nth","app.riddles/letter-display","app.riddles/joke-display","cljs.core.prn","fexpr__26289","fexpr__26290","fexpr__26291","app.riddles/joke-map","reagent.core.atom","app.riddles/handler","e","clojure.string/upper-case","app.riddles/answer","setup-id","fexpr__26292","fexpr__26295","fexpr__26296","fexpr__26297","selected-letter","fexpr__26298","letters-to-nums","joke-index","G__26299","fexpr__26300","selection-id","fexpr__26302","cljs.core._EQ_","fexpr__26303","state_26314","state_val_26315","inst_26304","inst_26306","inst_26307","inst_26308","inst_26309","inst_26310","inst_26311","inst_26312","statearr-26316","statearr-26317","e26318","statearr-26319","statearr-26320","statearr-26321","cljs.core.async/timeout","state_26328","state_val_26329","inst_26322","inst_26324","inst_26325","inst_26326","statearr-26330","statearr-26331","e26332","statearr-26333","statearr-26334","statearr-26335","app.riddles/wrong-or-right","answer-status","fexpr__26336","G__26337","cljs.core/Keyword","fexpr__26338","app.riddles/riddles","js/document.addEventListener","cljs.core/chunk-first"],"sourcesContent":["(ns app.riddles\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [reagent.core :as r]\n            [clojure.string :as str]\n            [cljs.core.async :refer [<! timeout]]))\n\n(defn api-call [joke-map]\n  (reset! joke-map {:joke-counter 0})\n  (loop [x 0]\n    (when (< x 4)\n    (go\n      (let [api-response (<! (http/get \"https://official-joke-api.appspot.com/random_joke\" {:with-credentials? false}))]\n        (swap! joke-map assoc-in [:jokes (get-in api-response [:body :id])] (get-in api-response [:body])))\n        (swap! joke-map assoc :ordered-jokes (map val (@joke-map :jokes)))\n        (swap! joke-map assoc :shuffled-jokes (shuffle (map val (@joke-map :jokes)))))\n      (recur (inc x)))))\n\n(defn lister [items]\n  (let [letters [\"A\" \"B\" \"C\" \"D\"]]\n    (when (> (count items) 3)\n    [:ul\n    (for [item items]\n      ^{:key item} [:li \"(\"(nth letters (.indexOf items item)) \")  \" (:punchline item)])])))\n\n(defn letter-display [joke-map]\n  (when (:shuffled-jokes @joke-map)\n  [:p \"You typed letter: \"(:temp-letter @joke-map)]))\n\n(defn joke-display [joke-map]\n  (prn \"joke-map:\" @joke-map)\n  [:div\n    [:input {:type \"button\" :class \"click-here\" :value \"Click Here for Riddles!\"\n            :on-click #(api-call joke-map)}]\n    [:p (:setup (nth (@joke-map :ordered-jokes) (@joke-map :joke-counter)))]\n       [lister (@joke-map :shuffled-jokes)]])\n\n(def joke-map (r/atom {:joke-counter 0}))\n\n(defn handler [e]\n   (swap! joke-map assoc :letter  (str/upper-case (.-key e)))\n   (swap! joke-map assoc :temp-letter  (str/upper-case (.-key e))))\n\n(defn answer [joke-map]\n  ; TODO Break out each condition into its own function.\n  (let [setup-id (when (@joke-map :ordered-jokes)((nth (@joke-map :ordered-jokes) (@joke-map :joke-counter)) :id))\n        selected-letter (@joke-map :letter)\n        letters-to-nums {\"A\" 0 \"B\" 1 \"C\" 2 \"D\" 3}\n        joke-index (letters-to-nums (@joke-map :letter))\n        selection-id (get-in @joke-map [:shuffled-jokes joke-index :id])]\n        (when (and (some? selected-letter) (some? (@joke-map :jokes)))\n          (if (= setup-id selection-id)\n            (do\n              (if (< (@joke-map :joke-counter) 3)\n              (do\n                (swap! joke-map assoc :wrong-or-right \"You are Correct!!!\" :answer-status :correct)\n                (swap! joke-map assoc :letter nil)\n                (go\n                  (<! (timeout 1000))\n                    (swap! joke-map assoc :joke-counter (inc (@joke-map :joke-counter)))\n                    (swap! joke-map assoc :wrong-or-right \"\")\n                    (swap! joke-map assoc :temp-letter nil)))\n              (do\n               (swap! joke-map assoc :wrong-or-right \"Well done! You cleared the riddles! Click for another set!\" :answer-status :cleared)\n               (swap! joke-map assoc :letter nil))))\n            (do\n              (swap! joke-map assoc :wrong-or-right \"Wrong!\" :answer-status :wrong)\n              (swap! joke-map assoc :letter nil)\n              (go\n                (<! (timeout 1000))\n                  (swap! joke-map assoc :wrong-or-right \"\")\n                  (swap! joke-map assoc :temp-letter nil))))))\n            nil)\n\n(defn wrong-or-right [joke-map]\n  [:p {:class\n      (let [answer-status (@joke-map :answer-status)]\n        (case answer-status\n          :correct \"correct\"\n          :wrong \"wrong\"\n          \"cleared\"))} (@joke-map :wrong-or-right)])\n\n(defn riddles []\n  ; TODO There may be a way to do this with shadow.cljs\n  ; TODO This may be creating many many listeners. Address.\n    (js/document.addEventListener \"keypress\" handler)\n  [:<>\n    [:link {:rel \"stylesheet\" :href \"/css/style.css\"}]\n    [:div {:class \"joke-container centered\"}\n      [:p {:class \"title\"} \"RIDDLE QUIZ!\"]\n      [joke-display joke-map]\n      [letter-display joke-map]\n      (answer joke-map)\n      [wrong-or-right joke-map]]])\n"]}